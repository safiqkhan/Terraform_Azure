
trigger:
 paths:
   include:
     - '**/*.tf'
   exclude:
     - azure-pipelines.yml
     - azure-pipelines-backend.yml
     - customdata.sh
variables:
- group: Terraform_Variable
# pool:
#   name: Default
#   Demands:
#   - agent.name -equals sfq_win
pool:
  vmImage: ubuntu-latest
parameters:
 - name: execlevel
   displayName: Execution Level
   type: string
   default: plan
   values:
     - plan
     - apply
     - destroy
 - name: platform
   displayName: Platform deploy
   type: string
   default: linux
   values:
     - linux
     - windows

stages:
  - stage: tfvalidate
    condition: eq ('${{parameters.execlevel}}' , 'plan')
    jobs:
      - job: validate
        timeoutInMinutes: 6
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            displayName: 'Install Latest Terraform'
            inputs:
              terraformVersion: 'latest'
          - checkout: self
            displayName: 'Checkout repository'
          - template: terraform_init.yml
            parameters:
              storage_rg_name: $(storage_rg_name)
              location: $(location)
              storage_account_name: $(storage_account_name)
          - task: TerraformCLI@0
            displayName: 'Validate Terraform'
            inputs:
              command: 'validate'
              workingDirectory: '$(Build.SourcesDirectory)'
          - task: TerraformCLI@0
            displayName: 'Plan Terraform'
            inputs:
              command: 'plan'
              environmentServiceName: 'Free_Trial'
              commandOptions: '--target=module.${{ parameters.platform }}_vm -var resource_group_name=$(resource_group_name) -out=terraform.tfplan'
              publishPlanResults: 'Terraform_plan'

  - stage: tfdeploy
    condition: eq ('${{parameters.execlevel}}' , 'apply')
    jobs:
     - job: apply
       timeoutInMinutes: 16
       steps:
          - template: terraform_init.yml
            parameters:
              storage_rg_name: $(storage_rg_name)
              location: $(location)
              storage_account_name: $(storage_account_name)
          - task: TerraformCLI@0
            displayName: 'Plan Terraform'
            inputs:
              command: 'plan'
              environmentServiceName: 'Free_Trial'
              commandOptions: '--target=module.${{ parameters.platform }}_vm -var resource_group_name=$(resource_group_name) -out=terraform.tfplan'
              publishPlanResults: 'Terraform_plan'
          - task: TerraformCLI@0
            displayName: 'Import Terraform'
            continueOnError: true
            inputs:
              command: 'import'
              workingDirectory: '$(Build.SourcesDirectory)'
              environmentServiceName: 'Free_Trial'
              resourceAddress: 'azurerm_resource_group.rg'
              resourceId: '/subscriptions/3bc9efe9-3af6-45ac-93a2-a2901d8838ae/resourceGroups/$(resource_group_name)-rg'

          - task: TerraformCLI@0
            displayName: 'Apply Terraform'
            continueOnError: true
            inputs:
              command: 'apply'
              environmentServiceName: 'Free_Trial'
              workingDirectory: '$(Build.SourcesDirectory)'
              commandOptions: '--target=module.${{ parameters.platform }}_vm -var resource_group_name=$(resource_group_name)'
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)'
              Contents: '**/*.pem'  # Specify the file to copy
              TargetFolder: '$(Build.ArtifactStagingDirectory)' 
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'azuredata'
            
  - stage: tfdestroy
    condition: eq ('${{parameters.execlevel}}' , 'destroy')
    jobs:
     - job: destroy
       timeoutInMinutes: 6
       steps:
          - template: terraform_init.yml
            parameters:
              storage_rg_name: $(storage_rg_name)
              location: $(location)
              storage_account_name: $(storage_account_name)
          - task: TerraformCLI@0
            displayName: 'destroy Terraform'
            continueOnError: true
            inputs:
              command: 'destroy'
              environmentServiceName: 'Free_Trial'
              workingDirectory: '$(Build.SourcesDirectory)'
              commandOptions: '--target=module.${{ parameters.platform }}_vm'
