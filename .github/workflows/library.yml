name: ADO_Library Operations

on:
  workflow_dispatch:
    inputs:
      OPERATION:
        type: choice
        description: 'Enter Execution policy'
        required: true
        default: 'read'
        options:
        - create
        - read
        - update
        - delete
        - drop
      var_group:
        type: string
        description: 'Enter Variable Group Name'
        default: 'Test'
      variable:
        type: string
        description: 'Enter Variable Name'
        default: 'Name'
      value:
        type: string
        description: 'Enter Value here'
        default: 'app'
      secret:
         type: boolean
         description: 'Is Secret'

jobs:
  choose_operation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0
        
          # az config set extension.use_dynamic_install=yes_without_prompt 
      - name: Set up environment
        continue-on-error: true
        run: |
          echo "Selected operation ${{ inputs.OPERATION }}"
          echo "az devops configure -d organization=https://dev.azure.com/safiquddinkhan project=onestop" > setup.sh
          az devops configure -d organization=https://dev.azure.com/safiquddinkhan project=onestop
          echo "export AZURE_DEVOPS_EXT_PAT=${AccessToken}" >> setup.sh
          export AZURE_DEVOPS_EXT_PAT="${AccessToken}"
          group_id=$(az pipelines variable-group list --query "[?name=='${var_group}'].id" -o tsv)
          echo "group_id=${group_id}" >> setup.sh
          echo "setup completed"
        env:
          AccessToken: ${{ secrets.ADOAccessToken }}
          var_group: ${{ inputs.var_group }}
        shell: bash

      - name: Save setup.sh as artifact
        uses: actions/upload-artifact@v3.1.3
        with:
          name: setup-artifact
          path: setup.sh

  create_operation:
    needs: choose_operation
    runs-on: ubuntu-latest
    if: ${{ inputs.OPERATION== 'create' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0

      - name: Restore setup.sh
        uses: actions/download-artifact@v3.0.2
        with:
          name: setup-artifact
          path: .

      - name: Performing Create operation
        run: |
          source setup.sh
          if [ -z "$group_id" ]; then
            echo "az pipelines variable-group create --authorize true --name ${var_group} --description 'Variables for my Variable group' --variables ${variable}=${value} -o yaml"
            az pipelines variable-group create --authorize true --name ${var_group} --description "Variables for my Variable group" --variables ${variable}=${value} -o yaml
          else
            echo "az pipelines variable-group variable create --group-id ${group_id} --name ${variable} --value ${value} --secret ${secret} -o table"
            az pipelines variable-group variable create --group-id ${group_id} --name ${variable} --value ${value} --secret ${secret} -o table
          fi
        env:
          var_group: ${{ inputs.var_group }}
          variable: ${{ inputs.variable }}
          value: ${{ inputs.value }}
          secret: ${{ inputs.secret }}
        shell: bash

  read_operation:
    needs: choose_operation
    runs-on: ubuntu-latest
    if: ${{ inputs.OPERATION== 'read' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0

      - name: Restore setup.sh
        uses: actions/download-artifact@v3.0.2
        with:
          name: setup-artifact
          path: .

      - name: Performing Read operation
        run: |
          source setup.sh
          echo "Performing Read operation"
          az pipelines variable-group list --top 3 --query-order Asc --output table
          echo "az pipelines variable-group show --group-id ${group_id} -o json | jq -cr .variables.${variable}.value"
          data=$(az pipelines variable-group show --group-id ${group_id} -o json | jq -cr .variables.${variable}.value)
          echo -e ${var_group} "Contains Variable-${variable} with value is \n" $data
          az devops logout || echo "az devops logout unsuccessful"
        env:
          var_group: ${{ inputs.var_group }}
          variable: ${{ inputs.variable }}
        shell: bash

  update_operation:
    needs: choose_operation
    runs-on: ubuntu-latest
    if: inputs.OPERATION== 'update'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0

      - name: Restore setup.sh
        uses: actions/download-artifact@v3.0.2
        with:
          name: setup-artifact
          path: .

      - name: Performing Update operation
        run: |
          source setup.sh
          echo "Performing Update operation"
          echo "az pipelines variable-group variable update --group-id ${group_id} --name ${variable} --value ${value} --secret ${secret} -o yaml"
          az pipelines variable-group variable update --group-id ${group_id} --name ${variable} --value ${value} --secret ${secret} -o yaml
        env:
          variable: ${{ inputs.variable }}
          value: ${{ inputs.value }}
          secret: ${{ inputs.secret }}
        shell: bash

  delete_operation:
    needs: choose_operation
    runs-on: ubuntu-latest
    if: inputs.OPERATION== 'delete'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0

      - name: Restore setup.sh
        uses: actions/download-artifact@v3.0.2
        with:
          name: setup-artifact
          path: .

      - name: Performing Delete operation
        run: |
          source setup.sh
          echo "Performing Delete operation"
          echo "az pipelines variable-group variable delete --group-id ${group_id} --name ${variable} -y"
          az pipelines variable-group variable delete --group-id ${group_id} --name ${variable} -y
        env:
          variable: ${{ inputs.variable }}
        shell: bash

  drop_operation:
    needs: choose_operation
    runs-on: ubuntu-latest
    if: inputs.OPERATION== 'drop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0

      - name: Restore setup.sh
        uses: actions/download-artifact@v3.0.2
        with:
          name: setup-artifact
          path: .

      - name: Performing Drop operation
        run: |
          source setup.sh
          echo "Performing Drop operation"
          echo "az pipelines variable-group delete --group-id ${group_id} -y"
          az pipelines variable-group variable delete --group-id ${group_id} -y
        shell: bash
